// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Message {

namespace {

const ::google::protobuf::Descriptor* IMMsgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMMsgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMMsgDataAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMMsgDataAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMMsgDataReadAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMMsgDataReadAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMMsgDataReadNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMMsgDataReadNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMClientTimeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMClientTimeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMClientTimeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMClientTimeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMUnreadMsgCntReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUnreadMsgCntReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMUnreadMsgCntRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMUnreadMsgCntRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMGetMsgListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMGetMsgListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMGetMsgListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMGetMsgListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMGetLatestMsgIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMGetLatestMsgIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMGetLatestMsgIdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMGetLatestMsgIdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMGetMsgByIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMGetMsgByIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IMGetMsgByIdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IMGetMsgByIdRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IM_2eMessage_2eproto() {
  protobuf_AddDesc_IM_2eMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IM.Message.proto");
  GOOGLE_CHECK(file != NULL);
  IMMsgData_descriptor_ = file->message_type(0);
  static const int IMMsgData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, from_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, to_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, attach_data_),
  };
  IMMsgData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMMsgData_descriptor_,
      IMMsgData::default_instance_,
      IMMsgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMMsgData));
  IMMsgDataAck_descriptor_ = file->message_type(1);
  static const int IMMsgDataAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataAck, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataAck, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataAck, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataAck, session_type_),
  };
  IMMsgDataAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMMsgDataAck_descriptor_,
      IMMsgDataAck::default_instance_,
      IMMsgDataAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMMsgDataAck));
  IMMsgDataReadAck_descriptor_ = file->message_type(2);
  static const int IMMsgDataReadAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadAck, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadAck, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadAck, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadAck, session_type_),
  };
  IMMsgDataReadAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMMsgDataReadAck_descriptor_,
      IMMsgDataReadAck::default_instance_,
      IMMsgDataReadAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMMsgDataReadAck));
  IMMsgDataReadNotify_descriptor_ = file->message_type(3);
  static const int IMMsgDataReadNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadNotify, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadNotify, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadNotify, session_type_),
  };
  IMMsgDataReadNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMMsgDataReadNotify_descriptor_,
      IMMsgDataReadNotify::default_instance_,
      IMMsgDataReadNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMMsgDataReadNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMMsgDataReadNotify));
  IMClientTimeReq_descriptor_ = file->message_type(4);
  static const int IMClientTimeReq_offsets_[1] = {
  };
  IMClientTimeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMClientTimeReq_descriptor_,
      IMClientTimeReq::default_instance_,
      IMClientTimeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMClientTimeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMClientTimeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMClientTimeReq));
  IMClientTimeRsp_descriptor_ = file->message_type(5);
  static const int IMClientTimeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMClientTimeRsp, server_time_),
  };
  IMClientTimeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMClientTimeRsp_descriptor_,
      IMClientTimeRsp::default_instance_,
      IMClientTimeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMClientTimeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMClientTimeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMClientTimeRsp));
  IMUnreadMsgCntReq_descriptor_ = file->message_type(6);
  static const int IMUnreadMsgCntReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntReq, attach_data_),
  };
  IMUnreadMsgCntReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMUnreadMsgCntReq_descriptor_,
      IMUnreadMsgCntReq::default_instance_,
      IMUnreadMsgCntReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMUnreadMsgCntReq));
  IMUnreadMsgCntRsp_descriptor_ = file->message_type(7);
  static const int IMUnreadMsgCntRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntRsp, total_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntRsp, unreadinfo_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntRsp, attach_data_),
  };
  IMUnreadMsgCntRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMUnreadMsgCntRsp_descriptor_,
      IMUnreadMsgCntRsp::default_instance_,
      IMUnreadMsgCntRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMUnreadMsgCntRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMUnreadMsgCntRsp));
  IMGetMsgListReq_descriptor_ = file->message_type(8);
  static const int IMGetMsgListReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, msg_id_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, msg_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, attach_data_),
  };
  IMGetMsgListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMGetMsgListReq_descriptor_,
      IMGetMsgListReq::default_instance_,
      IMGetMsgListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMGetMsgListReq));
  IMGetMsgListRsp_descriptor_ = file->message_type(9);
  static const int IMGetMsgListRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, msg_id_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, msg_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, attach_data_),
  };
  IMGetMsgListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMGetMsgListRsp_descriptor_,
      IMGetMsgListRsp::default_instance_,
      IMGetMsgListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMGetMsgListRsp));
  IMGetLatestMsgIdReq_descriptor_ = file->message_type(10);
  static const int IMGetLatestMsgIdReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdReq, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdReq, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdReq, attach_data_),
  };
  IMGetLatestMsgIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMGetLatestMsgIdReq_descriptor_,
      IMGetLatestMsgIdReq::default_instance_,
      IMGetLatestMsgIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMGetLatestMsgIdReq));
  IMGetLatestMsgIdRsp_descriptor_ = file->message_type(11);
  static const int IMGetLatestMsgIdRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdRsp, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdRsp, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdRsp, latest_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdRsp, attach_data_),
  };
  IMGetLatestMsgIdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMGetLatestMsgIdRsp_descriptor_,
      IMGetLatestMsgIdRsp::default_instance_,
      IMGetLatestMsgIdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetLatestMsgIdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMGetLatestMsgIdRsp));
  IMGetMsgByIdReq_descriptor_ = file->message_type(12);
  static const int IMGetMsgByIdReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdReq, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdReq, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdReq, msg_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdReq, attach_data_),
  };
  IMGetMsgByIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMGetMsgByIdReq_descriptor_,
      IMGetMsgByIdReq::default_instance_,
      IMGetMsgByIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMGetMsgByIdReq));
  IMGetMsgByIdRsp_descriptor_ = file->message_type(13);
  static const int IMGetMsgByIdRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdRsp, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdRsp, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdRsp, msg_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdRsp, attach_data_),
  };
  IMGetMsgByIdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IMGetMsgByIdRsp_descriptor_,
      IMGetMsgByIdRsp::default_instance_,
      IMGetMsgByIdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMGetMsgByIdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IMGetMsgByIdRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IM_2eMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMMsgData_descriptor_, &IMMsgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMMsgDataAck_descriptor_, &IMMsgDataAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMMsgDataReadAck_descriptor_, &IMMsgDataReadAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMMsgDataReadNotify_descriptor_, &IMMsgDataReadNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMClientTimeReq_descriptor_, &IMClientTimeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMClientTimeRsp_descriptor_, &IMClientTimeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMUnreadMsgCntReq_descriptor_, &IMUnreadMsgCntReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMUnreadMsgCntRsp_descriptor_, &IMUnreadMsgCntRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMGetMsgListReq_descriptor_, &IMGetMsgListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMGetMsgListRsp_descriptor_, &IMGetMsgListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMGetLatestMsgIdReq_descriptor_, &IMGetLatestMsgIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMGetLatestMsgIdRsp_descriptor_, &IMGetLatestMsgIdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMGetMsgByIdReq_descriptor_, &IMGetMsgByIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IMGetMsgByIdRsp_descriptor_, &IMGetMsgByIdRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IM_2eMessage_2eproto() {
  delete IMMsgData::default_instance_;
  delete IMMsgData_reflection_;
  delete IMMsgDataAck::default_instance_;
  delete IMMsgDataAck_reflection_;
  delete IMMsgDataReadAck::default_instance_;
  delete IMMsgDataReadAck_reflection_;
  delete IMMsgDataReadNotify::default_instance_;
  delete IMMsgDataReadNotify_reflection_;
  delete IMClientTimeReq::default_instance_;
  delete IMClientTimeReq_reflection_;
  delete IMClientTimeRsp::default_instance_;
  delete IMClientTimeRsp_reflection_;
  delete IMUnreadMsgCntReq::default_instance_;
  delete IMUnreadMsgCntReq_reflection_;
  delete IMUnreadMsgCntRsp::default_instance_;
  delete IMUnreadMsgCntRsp_reflection_;
  delete IMGetMsgListReq::default_instance_;
  delete IMGetMsgListReq_reflection_;
  delete IMGetMsgListRsp::default_instance_;
  delete IMGetMsgListRsp_reflection_;
  delete IMGetLatestMsgIdReq::default_instance_;
  delete IMGetLatestMsgIdReq_reflection_;
  delete IMGetLatestMsgIdRsp::default_instance_;
  delete IMGetLatestMsgIdRsp_reflection_;
  delete IMGetMsgByIdReq::default_instance_;
  delete IMGetMsgByIdReq_reflection_;
  delete IMGetMsgByIdRsp::default_instance_;
  delete IMGetMsgByIdRsp_reflection_;
}

void protobuf_AddDesc_IM_2eMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020IM.Message.proto\022\nIM.Message\032\023IM.BaseD"
    "efine.proto\"\256\001\n\tIMMsgData\022\024\n\014from_user_i"
    "d\030\001 \002(\r\022\025\n\rto_session_id\030\002 \002(\r\022\016\n\006msg_id"
    "\030\003 \002(\r\022\023\n\013create_time\030\004 \002(\r\022(\n\010msg_type\030"
    "\005 \002(\0162\026.IM.BaseDefine.MsgType\022\020\n\010msg_dat"
    "a\030\006 \002(\014\022\023\n\013attach_data\030\024 \001(\014\"u\n\014IMMsgDat"
    "aAck\022\017\n\007user_id\030\001 \002(\r\022\022\n\nsession_id\030\002 \002("
    "\r\022\016\n\006msg_id\030\003 \002(\r\0220\n\014session_type\030\004 \002(\0162"
    "\032.IM.BaseDefine.SessionType\"y\n\020IMMsgData"
    "ReadAck\022\017\n\007user_id\030\001 \002(\r\022\022\n\nsession_id\030\002"
    " \002(\r\022\016\n\006msg_id\030\003 \002(\r\0220\n\014session_type\030\004 \002"
    "(\0162\032.IM.BaseDefine.SessionType\"|\n\023IMMsgD"
    "ataReadNotify\022\017\n\007user_id\030\001 \002(\r\022\022\n\nsessio"
    "n_id\030\002 \002(\r\022\016\n\006msg_id\030\003 \002(\r\0220\n\014session_ty"
    "pe\030\004 \002(\0162\032.IM.BaseDefine.SessionType\"\021\n\017"
    "IMClientTimeReq\"&\n\017IMClientTimeRsp\022\023\n\013se"
    "rver_time\030\001 \002(\r\"9\n\021IMUnreadMsgCntReq\022\017\n\007"
    "user_id\030\001 \002(\r\022\023\n\013attach_data\030\024 \001(\014\"\200\001\n\021I"
    "MUnreadMsgCntRsp\022\017\n\007user_id\030\001 \002(\r\022\021\n\ttot"
    "al_cnt\030\002 \002(\r\0222\n\017unreadinfo_list\030\003 \003(\0132\031."
    "IM.BaseDefine.UnreadInfo\022\023\n\013attach_data\030"
    "\024 \001(\014\"\244\001\n\017IMGetMsgListReq\022\017\n\007user_id\030\001 \002"
    "(\r\0220\n\014session_type\030\002 \002(\0162\032.IM.BaseDefine"
    ".SessionType\022\022\n\nsession_id\030\003 \002(\r\022\024\n\014msg_"
    "id_begin\030\004 \002(\r\022\017\n\007msg_cnt\030\005 \002(\r\022\023\n\013attac"
    "h_data\030\024 \001(\014\"\275\001\n\017IMGetMsgListRsp\022\017\n\007user"
    "_id\030\001 \002(\r\0220\n\014session_type\030\002 \002(\0162\032.IM.Bas"
    "eDefine.SessionType\022\022\n\nsession_id\030\003 \002(\r\022"
    "\024\n\014msg_id_begin\030\004 \002(\r\022(\n\010msg_list\030\005 \003(\0132"
    "\026.IM.BaseDefine.MsgInfo\022\023\n\013attach_data\030\024"
    " \001(\014\"\201\001\n\023IMGetLatestMsgIdReq\022\017\n\007user_id\030"
    "\001 \002(\r\0220\n\014session_type\030\002 \002(\0162\032.IM.BaseDef"
    "ine.SessionType\022\022\n\nsession_id\030\003 \002(\r\022\023\n\013a"
    "ttach_data\030\024 \001(\014\"\230\001\n\023IMGetLatestMsgIdRsp"
    "\022\017\n\007user_id\030\001 \002(\r\0220\n\014session_type\030\002 \002(\0162"
    "\032.IM.BaseDefine.SessionType\022\022\n\nsession_i"
    "d\030\003 \002(\r\022\025\n\rlatest_msg_id\030\004 \002(\r\022\023\n\013attach"
    "_data\030\024 \001(\014\"\222\001\n\017IMGetMsgByIdReq\022\017\n\007user_"
    "id\030\001 \002(\r\0220\n\014session_type\030\002 \002(\0162\032.IM.Base"
    "Define.SessionType\022\022\n\nsession_id\030\003 \002(\r\022\023"
    "\n\013msg_id_list\030\004 \003(\r\022\023\n\013attach_data\030\024 \001(\014"
    "\"\247\001\n\017IMGetMsgByIdRsp\022\017\n\007user_id\030\001 \002(\r\0220\n"
    "\014session_type\030\002 \002(\0162\032.IM.BaseDefine.Sess"
    "ionType\022\022\n\nsession_id\030\003 \002(\r\022(\n\010msg_list\030"
    "\004 \003(\0132\026.IM.BaseDefine.MsgInfo\022\023\n\013attach_"
    "data\030\024 \001(\014B\031\n\027com.mogujie.tt.protobuf", 1837);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IM.Message.proto", &protobuf_RegisterTypes);
  IMMsgData::default_instance_ = new IMMsgData();
  IMMsgDataAck::default_instance_ = new IMMsgDataAck();
  IMMsgDataReadAck::default_instance_ = new IMMsgDataReadAck();
  IMMsgDataReadNotify::default_instance_ = new IMMsgDataReadNotify();
  IMClientTimeReq::default_instance_ = new IMClientTimeReq();
  IMClientTimeRsp::default_instance_ = new IMClientTimeRsp();
  IMUnreadMsgCntReq::default_instance_ = new IMUnreadMsgCntReq();
  IMUnreadMsgCntRsp::default_instance_ = new IMUnreadMsgCntRsp();
  IMGetMsgListReq::default_instance_ = new IMGetMsgListReq();
  IMGetMsgListRsp::default_instance_ = new IMGetMsgListRsp();
  IMGetLatestMsgIdReq::default_instance_ = new IMGetLatestMsgIdReq();
  IMGetLatestMsgIdRsp::default_instance_ = new IMGetLatestMsgIdRsp();
  IMGetMsgByIdReq::default_instance_ = new IMGetMsgByIdReq();
  IMGetMsgByIdRsp::default_instance_ = new IMGetMsgByIdRsp();
  IMMsgData::default_instance_->InitAsDefaultInstance();
  IMMsgDataAck::default_instance_->InitAsDefaultInstance();
  IMMsgDataReadAck::default_instance_->InitAsDefaultInstance();
  IMMsgDataReadNotify::default_instance_->InitAsDefaultInstance();
  IMClientTimeReq::default_instance_->InitAsDefaultInstance();
  IMClientTimeRsp::default_instance_->InitAsDefaultInstance();
  IMUnreadMsgCntReq::default_instance_->InitAsDefaultInstance();
  IMUnreadMsgCntRsp::default_instance_->InitAsDefaultInstance();
  IMGetMsgListReq::default_instance_->InitAsDefaultInstance();
  IMGetMsgListRsp::default_instance_->InitAsDefaultInstance();
  IMGetLatestMsgIdReq::default_instance_->InitAsDefaultInstance();
  IMGetLatestMsgIdRsp::default_instance_->InitAsDefaultInstance();
  IMGetMsgByIdReq::default_instance_->InitAsDefaultInstance();
  IMGetMsgByIdRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eMessage_2eproto {
  StaticDescriptorInitializer_IM_2eMessage_2eproto() {
    protobuf_AddDesc_IM_2eMessage_2eproto();
  }
} static_descriptor_initializer_IM_2eMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IMMsgData::kFromUserIdFieldNumber;
const int IMMsgData::kToSessionIdFieldNumber;
const int IMMsgData::kMsgIdFieldNumber;
const int IMMsgData::kCreateTimeFieldNumber;
const int IMMsgData::kMsgTypeFieldNumber;
const int IMMsgData::kMsgDataFieldNumber;
const int IMMsgData::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMMsgData::IMMsgData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgData)
}

void IMMsgData::InitAsDefaultInstance() {
}

IMMsgData::IMMsgData(const IMMsgData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgData)
}

void IMMsgData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  from_user_id_ = 0u;
  to_session_id_ = 0u;
  msg_id_ = 0u;
  create_time_ = 0u;
  msg_type_ = 1;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgData::~IMMsgData() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgData)
  SharedDtor();
}

void IMMsgData::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_data_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMMsgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMMsgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMMsgData_descriptor_;
}

const IMMsgData& IMMsgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMMsgData* IMMsgData::default_instance_ = NULL;

IMMsgData* IMMsgData::New() const {
  return new IMMsgData;
}

void IMMsgData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMMsgData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(from_user_id_, create_time_);
    msg_type_ = 1;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_data_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMMsgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 from_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
          set_has_from_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_session_id;
        break;
      }

      // required uint32 to_session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_session_id_)));
          set_has_to_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 4;
      case 4: {
        if (tag == 32) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_type;
        break;
      }

      // required .IM.BaseDefine.MsgType msg_type = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::IM::BaseDefine::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 6;
      case 6: {
        if (tag == 50) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgData)
  return false;
#undef DO_
}

void IMMsgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgData)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // required uint32 to_session_id = 2;
  if (has_to_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required uint32 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  // required .IM.BaseDefine.MsgType msg_type = 5;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_type(), output);
  }

  // required bytes msg_data = 6;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->msg_data(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgData)
}

::google::protobuf::uint8* IMMsgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgData)
  // required uint32 from_user_id = 1;
  if (has_from_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // required uint32 to_session_id = 2;
  if (has_to_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_session_id(), target);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_id(), target);
  }

  // required uint32 create_time = 4;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_time(), target);
  }

  // required .IM.BaseDefine.MsgType msg_type = 5;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_type(), target);
  }

  // required bytes msg_data = 6;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->msg_data(), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgData)
  return target;
}

int IMMsgData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 from_user_id = 1;
    if (has_from_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_user_id());
    }

    // required uint32 to_session_id = 2;
    if (has_to_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_session_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required uint32 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required .IM.BaseDefine.MsgType msg_type = 5;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required bytes msg_data = 6;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMMsgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMMsgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMMsgData::MergeFrom(const IMMsgData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_user_id()) {
      set_from_user_id(from.from_user_id());
    }
    if (from.has_to_session_id()) {
      set_to_session_id(from.to_session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMMsgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMMsgData::CopyFrom(const IMMsgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void IMMsgData::Swap(IMMsgData* other) {
  if (other != this) {
    std::swap(from_user_id_, other->from_user_id_);
    std::swap(to_session_id_, other->to_session_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMMsgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMMsgData_descriptor_;
  metadata.reflection = IMMsgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMMsgDataAck::kUserIdFieldNumber;
const int IMMsgDataAck::kSessionIdFieldNumber;
const int IMMsgDataAck::kMsgIdFieldNumber;
const int IMMsgDataAck::kSessionTypeFieldNumber;
#endif  // !_MSC_VER

IMMsgDataAck::IMMsgDataAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataAck)
}

void IMMsgDataAck::InitAsDefaultInstance() {
}

IMMsgDataAck::IMMsgDataAck(const IMMsgDataAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataAck)
}

void IMMsgDataAck::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgDataAck::~IMMsgDataAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataAck)
  SharedDtor();
}

void IMMsgDataAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMMsgDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMMsgDataAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMMsgDataAck_descriptor_;
}

const IMMsgDataAck& IMMsgDataAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMMsgDataAck* IMMsgDataAck::default_instance_ = NULL;

IMMsgDataAck* IMMsgDataAck::New() const {
  return new IMMsgDataAck;
}

void IMMsgDataAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMMsgDataAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMMsgDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataAck)
  return false;
#undef DO_
}

void IMMsgDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataAck)
}

::google::protobuf::uint8* IMMsgDataAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->session_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataAck)
  return target;
}

int IMMsgDataAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 4;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMMsgDataAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMMsgDataAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMMsgDataAck::MergeFrom(const IMMsgDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMMsgDataAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMMsgDataAck::CopyFrom(const IMMsgDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMMsgDataAck::Swap(IMMsgDataAck* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMMsgDataAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMMsgDataAck_descriptor_;
  metadata.reflection = IMMsgDataAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMMsgDataReadAck::kUserIdFieldNumber;
const int IMMsgDataReadAck::kSessionIdFieldNumber;
const int IMMsgDataReadAck::kMsgIdFieldNumber;
const int IMMsgDataReadAck::kSessionTypeFieldNumber;
#endif  // !_MSC_VER

IMMsgDataReadAck::IMMsgDataReadAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataReadAck)
}

void IMMsgDataReadAck::InitAsDefaultInstance() {
}

IMMsgDataReadAck::IMMsgDataReadAck(const IMMsgDataReadAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadAck)
}

void IMMsgDataReadAck::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgDataReadAck::~IMMsgDataReadAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadAck)
  SharedDtor();
}

void IMMsgDataReadAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMMsgDataReadAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMMsgDataReadAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMMsgDataReadAck_descriptor_;
}

const IMMsgDataReadAck& IMMsgDataReadAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMMsgDataReadAck* IMMsgDataReadAck::default_instance_ = NULL;

IMMsgDataReadAck* IMMsgDataReadAck::New() const {
  return new IMMsgDataReadAck;
}

void IMMsgDataReadAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMMsgDataReadAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMMsgDataReadAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataReadAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataReadAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataReadAck)
  return false;
#undef DO_
}

void IMMsgDataReadAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataReadAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataReadAck)
}

::google::protobuf::uint8* IMMsgDataReadAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataReadAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->session_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataReadAck)
  return target;
}

int IMMsgDataReadAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 4;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataReadAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMMsgDataReadAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMMsgDataReadAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMMsgDataReadAck::MergeFrom(const IMMsgDataReadAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMMsgDataReadAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMMsgDataReadAck::CopyFrom(const IMMsgDataReadAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMMsgDataReadAck::Swap(IMMsgDataReadAck* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMMsgDataReadAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMMsgDataReadAck_descriptor_;
  metadata.reflection = IMMsgDataReadAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMMsgDataReadNotify::kUserIdFieldNumber;
const int IMMsgDataReadNotify::kSessionIdFieldNumber;
const int IMMsgDataReadNotify::kMsgIdFieldNumber;
const int IMMsgDataReadNotify::kSessionTypeFieldNumber;
#endif  // !_MSC_VER

IMMsgDataReadNotify::IMMsgDataReadNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMMsgDataReadNotify)
}

void IMMsgDataReadNotify::InitAsDefaultInstance() {
}

IMMsgDataReadNotify::IMMsgDataReadNotify(const IMMsgDataReadNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadNotify)
}

void IMMsgDataReadNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_id_ = 0u;
  msg_id_ = 0u;
  session_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMMsgDataReadNotify::~IMMsgDataReadNotify() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadNotify)
  SharedDtor();
}

void IMMsgDataReadNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMMsgDataReadNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMMsgDataReadNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMMsgDataReadNotify_descriptor_;
}

const IMMsgDataReadNotify& IMMsgDataReadNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMMsgDataReadNotify* IMMsgDataReadNotify::default_instance_ = NULL;

IMMsgDataReadNotify* IMMsgDataReadNotify::New() const {
  return new IMMsgDataReadNotify;
}

void IMMsgDataReadNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMMsgDataReadNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, msg_id_);
    session_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMMsgDataReadNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMMsgDataReadNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // required uint32 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 4;
      case 4: {
        if (tag == 32) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMMsgDataReadNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMMsgDataReadNotify)
  return false;
#undef DO_
}

void IMMsgDataReadNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMMsgDataReadNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msg_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMMsgDataReadNotify)
}

::google::protobuf::uint8* IMMsgDataReadNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataReadNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msg_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 4;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->session_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataReadNotify)
  return target;
}

int IMMsgDataReadNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 4;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgDataReadNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMMsgDataReadNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMMsgDataReadNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMMsgDataReadNotify::MergeFrom(const IMMsgDataReadNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMMsgDataReadNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMMsgDataReadNotify::CopyFrom(const IMMsgDataReadNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMMsgDataReadNotify::Swap(IMMsgDataReadNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMMsgDataReadNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMMsgDataReadNotify_descriptor_;
  metadata.reflection = IMMsgDataReadNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IMClientTimeReq::IMClientTimeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMClientTimeReq)
}

void IMClientTimeReq::InitAsDefaultInstance() {
}

IMClientTimeReq::IMClientTimeReq(const IMClientTimeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeReq)
}

void IMClientTimeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMClientTimeReq::~IMClientTimeReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeReq)
  SharedDtor();
}

void IMClientTimeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMClientTimeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMClientTimeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMClientTimeReq_descriptor_;
}

const IMClientTimeReq& IMClientTimeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMClientTimeReq* IMClientTimeReq::default_instance_ = NULL;

IMClientTimeReq* IMClientTimeReq::New() const {
  return new IMClientTimeReq;
}

void IMClientTimeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMClientTimeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMClientTimeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMClientTimeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMClientTimeReq)
  return false;
#undef DO_
}

void IMClientTimeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMClientTimeReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMClientTimeReq)
}

::google::protobuf::uint8* IMClientTimeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMClientTimeReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMClientTimeReq)
  return target;
}

int IMClientTimeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMClientTimeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMClientTimeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMClientTimeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMClientTimeReq::MergeFrom(const IMClientTimeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMClientTimeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMClientTimeReq::CopyFrom(const IMClientTimeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeReq::IsInitialized() const {

  return true;
}

void IMClientTimeReq::Swap(IMClientTimeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMClientTimeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMClientTimeReq_descriptor_;
  metadata.reflection = IMClientTimeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMClientTimeRsp::kServerTimeFieldNumber;
#endif  // !_MSC_VER

IMClientTimeRsp::IMClientTimeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMClientTimeRsp)
}

void IMClientTimeRsp::InitAsDefaultInstance() {
}

IMClientTimeRsp::IMClientTimeRsp(const IMClientTimeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeRsp)
}

void IMClientTimeRsp::SharedCtor() {
  _cached_size_ = 0;
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMClientTimeRsp::~IMClientTimeRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeRsp)
  SharedDtor();
}

void IMClientTimeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMClientTimeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMClientTimeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMClientTimeRsp_descriptor_;
}

const IMClientTimeRsp& IMClientTimeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMClientTimeRsp* IMClientTimeRsp::default_instance_ = NULL;

IMClientTimeRsp* IMClientTimeRsp::New() const {
  return new IMClientTimeRsp;
}

void IMClientTimeRsp::Clear() {
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMClientTimeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMClientTimeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMClientTimeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMClientTimeRsp)
  return false;
#undef DO_
}

void IMClientTimeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMClientTimeRsp)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMClientTimeRsp)
}

::google::protobuf::uint8* IMClientTimeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMClientTimeRsp)
  // required uint32 server_time = 1;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMClientTimeRsp)
  return target;
}

int IMClientTimeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_time = 1;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMClientTimeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMClientTimeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMClientTimeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMClientTimeRsp::MergeFrom(const IMClientTimeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMClientTimeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMClientTimeRsp::CopyFrom(const IMClientTimeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMClientTimeRsp::Swap(IMClientTimeRsp* other) {
  if (other != this) {
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMClientTimeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMClientTimeRsp_descriptor_;
  metadata.reflection = IMClientTimeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMUnreadMsgCntReq::kUserIdFieldNumber;
const int IMUnreadMsgCntReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUnreadMsgCntReq::IMUnreadMsgCntReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMUnreadMsgCntReq)
}

void IMUnreadMsgCntReq::InitAsDefaultInstance() {
}

IMUnreadMsgCntReq::IMUnreadMsgCntReq(const IMUnreadMsgCntReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntReq)
}

void IMUnreadMsgCntReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUnreadMsgCntReq::~IMUnreadMsgCntReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntReq)
  SharedDtor();
}

void IMUnreadMsgCntReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMUnreadMsgCntReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUnreadMsgCntReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUnreadMsgCntReq_descriptor_;
}

const IMUnreadMsgCntReq& IMUnreadMsgCntReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMUnreadMsgCntReq* IMUnreadMsgCntReq::default_instance_ = NULL;

IMUnreadMsgCntReq* IMUnreadMsgCntReq::New() const {
  return new IMUnreadMsgCntReq;
}

void IMUnreadMsgCntReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMUnreadMsgCntReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMUnreadMsgCntReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMUnreadMsgCntReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMUnreadMsgCntReq)
  return false;
#undef DO_
}

void IMUnreadMsgCntReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMUnreadMsgCntReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMUnreadMsgCntReq)
}

::google::protobuf::uint8* IMUnreadMsgCntReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMUnreadMsgCntReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMUnreadMsgCntReq)
  return target;
}

int IMUnreadMsgCntReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUnreadMsgCntReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMUnreadMsgCntReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMUnreadMsgCntReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMUnreadMsgCntReq::MergeFrom(const IMUnreadMsgCntReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMUnreadMsgCntReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUnreadMsgCntReq::CopyFrom(const IMUnreadMsgCntReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMUnreadMsgCntReq::Swap(IMUnreadMsgCntReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMUnreadMsgCntReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUnreadMsgCntReq_descriptor_;
  metadata.reflection = IMUnreadMsgCntReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMUnreadMsgCntRsp::kUserIdFieldNumber;
const int IMUnreadMsgCntRsp::kTotalCntFieldNumber;
const int IMUnreadMsgCntRsp::kUnreadinfoListFieldNumber;
const int IMUnreadMsgCntRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUnreadMsgCntRsp::IMUnreadMsgCntRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMUnreadMsgCntRsp)
}

void IMUnreadMsgCntRsp::InitAsDefaultInstance() {
}

IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(const IMUnreadMsgCntRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntRsp)
}

void IMUnreadMsgCntRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  total_cnt_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUnreadMsgCntRsp::~IMUnreadMsgCntRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntRsp)
  SharedDtor();
}

void IMUnreadMsgCntRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMUnreadMsgCntRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUnreadMsgCntRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMUnreadMsgCntRsp_descriptor_;
}

const IMUnreadMsgCntRsp& IMUnreadMsgCntRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMUnreadMsgCntRsp* IMUnreadMsgCntRsp::default_instance_ = NULL;

IMUnreadMsgCntRsp* IMUnreadMsgCntRsp::New() const {
  return new IMUnreadMsgCntRsp;
}

void IMUnreadMsgCntRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMUnreadMsgCntRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, total_cnt_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  unreadinfo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMUnreadMsgCntRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMUnreadMsgCntRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_cnt;
        break;
      }

      // required uint32 total_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unreadinfo_list;
        break;
      }

      // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
      case 3: {
        if (tag == 26) {
         parse_unreadinfo_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unreadinfo_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unreadinfo_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMUnreadMsgCntRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMUnreadMsgCntRsp)
  return false;
#undef DO_
}

void IMUnreadMsgCntRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMUnreadMsgCntRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 total_cnt = 2;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_cnt(), output);
  }

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  for (int i = 0; i < this->unreadinfo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unreadinfo_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMUnreadMsgCntRsp)
}

::google::protobuf::uint8* IMUnreadMsgCntRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMUnreadMsgCntRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 total_cnt = 2;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_cnt(), target);
  }

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  for (int i = 0; i < this->unreadinfo_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unreadinfo_list(i), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMUnreadMsgCntRsp)
  return target;
}

int IMUnreadMsgCntRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 total_cnt = 2;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_cnt());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  total_size += 1 * this->unreadinfo_list_size();
  for (int i = 0; i < this->unreadinfo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unreadinfo_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUnreadMsgCntRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMUnreadMsgCntRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMUnreadMsgCntRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMUnreadMsgCntRsp::MergeFrom(const IMUnreadMsgCntRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  unreadinfo_list_.MergeFrom(from.unreadinfo_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMUnreadMsgCntRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUnreadMsgCntRsp::CopyFrom(const IMUnreadMsgCntRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->unreadinfo_list())) return false;
  return true;
}

void IMUnreadMsgCntRsp::Swap(IMUnreadMsgCntRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(total_cnt_, other->total_cnt_);
    unreadinfo_list_.Swap(&other->unreadinfo_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMUnreadMsgCntRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMUnreadMsgCntRsp_descriptor_;
  metadata.reflection = IMUnreadMsgCntRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetMsgListReq::kUserIdFieldNumber;
const int IMGetMsgListReq::kSessionTypeFieldNumber;
const int IMGetMsgListReq::kSessionIdFieldNumber;
const int IMGetMsgListReq::kMsgIdBeginFieldNumber;
const int IMGetMsgListReq::kMsgCntFieldNumber;
const int IMGetMsgListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetMsgListReq::IMGetMsgListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgListReq)
}

void IMGetMsgListReq::InitAsDefaultInstance() {
}

IMGetMsgListReq::IMGetMsgListReq(const IMGetMsgListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListReq)
}

void IMGetMsgListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  msg_id_begin_ = 0u;
  msg_cnt_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgListReq::~IMGetMsgListReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListReq)
  SharedDtor();
}

void IMGetMsgListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMGetMsgListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetMsgListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMGetMsgListReq_descriptor_;
}

const IMGetMsgListReq& IMGetMsgListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMGetMsgListReq* IMGetMsgListReq::default_instance_ = NULL;

IMGetMsgListReq* IMGetMsgListReq::New() const {
  return new IMGetMsgListReq;
}

void IMGetMsgListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGetMsgListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(session_id_, msg_id_begin_);
    user_id_ = 0u;
    session_type_ = 1;
    msg_cnt_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMGetMsgListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_begin;
        break;
      }

      // required uint32 msg_id_begin = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
          set_has_msg_id_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_cnt;
        break;
      }

      // required uint32 msg_cnt = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_cnt_)));
          set_has_msg_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgListReq)
  return false;
#undef DO_
}

void IMGetMsgListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // required uint32 msg_cnt = 5;
  if (has_msg_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msg_cnt(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgListReq)
}

::google::protobuf::uint8* IMGetMsgListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msg_id_begin(), target);
  }

  // required uint32 msg_cnt = 5;
  if (has_msg_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msg_cnt(), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgListReq)
  return target;
}

int IMGetMsgListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id_begin = 4;
    if (has_msg_id_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id_begin());
    }

    // required uint32 msg_cnt = 5;
    if (has_msg_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_cnt());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMGetMsgListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMGetMsgListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMGetMsgListReq::MergeFrom(const IMGetMsgListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id_begin()) {
      set_msg_id_begin(from.msg_id_begin());
    }
    if (from.has_msg_cnt()) {
      set_msg_cnt(from.msg_cnt());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMGetMsgListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetMsgListReq::CopyFrom(const IMGetMsgListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMGetMsgListReq::Swap(IMGetMsgListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_begin_, other->msg_id_begin_);
    std::swap(msg_cnt_, other->msg_cnt_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMGetMsgListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMGetMsgListReq_descriptor_;
  metadata.reflection = IMGetMsgListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetMsgListRsp::kUserIdFieldNumber;
const int IMGetMsgListRsp::kSessionTypeFieldNumber;
const int IMGetMsgListRsp::kSessionIdFieldNumber;
const int IMGetMsgListRsp::kMsgIdBeginFieldNumber;
const int IMGetMsgListRsp::kMsgListFieldNumber;
const int IMGetMsgListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetMsgListRsp::IMGetMsgListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgListRsp)
}

void IMGetMsgListRsp::InitAsDefaultInstance() {
}

IMGetMsgListRsp::IMGetMsgListRsp(const IMGetMsgListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListRsp)
}

void IMGetMsgListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  msg_id_begin_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgListRsp::~IMGetMsgListRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListRsp)
  SharedDtor();
}

void IMGetMsgListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMGetMsgListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetMsgListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMGetMsgListRsp_descriptor_;
}

const IMGetMsgListRsp& IMGetMsgListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMGetMsgListRsp* IMGetMsgListRsp::default_instance_ = NULL;

IMGetMsgListRsp* IMGetMsgListRsp::New() const {
  return new IMGetMsgListRsp;
}

void IMGetMsgListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGetMsgListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(session_id_, msg_id_begin_);
    user_id_ = 0u;
    session_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMGetMsgListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_begin;
        break;
      }

      // required uint32 msg_id_begin = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_begin_)));
          set_has_msg_id_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_list;
        break;
      }

      // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgListRsp)
  return false;
#undef DO_
}

void IMGetMsgListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msg_id_begin(), output);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  for (int i = 0; i < this->msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msg_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgListRsp)
}

::google::protobuf::uint8* IMGetMsgListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // required uint32 msg_id_begin = 4;
  if (has_msg_id_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msg_id_begin(), target);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  for (int i = 0; i < this->msg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msg_list(i), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgListRsp)
  return target;
}

int IMGetMsgListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 msg_id_begin = 4;
    if (has_msg_id_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id_begin());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMGetMsgListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMGetMsgListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMGetMsgListRsp::MergeFrom(const IMGetMsgListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_msg_id_begin()) {
      set_msg_id_begin(from.msg_id_begin());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMGetMsgListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetMsgListRsp::CopyFrom(const IMGetMsgListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void IMGetMsgListRsp::Swap(IMGetMsgListRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(msg_id_begin_, other->msg_id_begin_);
    msg_list_.Swap(&other->msg_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMGetMsgListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMGetMsgListRsp_descriptor_;
  metadata.reflection = IMGetMsgListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetLatestMsgIdReq::kUserIdFieldNumber;
const int IMGetLatestMsgIdReq::kSessionTypeFieldNumber;
const int IMGetLatestMsgIdReq::kSessionIdFieldNumber;
const int IMGetLatestMsgIdReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetLatestMsgIdReq::IMGetLatestMsgIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetLatestMsgIdReq)
}

void IMGetLatestMsgIdReq::InitAsDefaultInstance() {
}

IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(const IMGetLatestMsgIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdReq)
}

void IMGetLatestMsgIdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetLatestMsgIdReq::~IMGetLatestMsgIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdReq)
  SharedDtor();
}

void IMGetLatestMsgIdReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMGetLatestMsgIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetLatestMsgIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMGetLatestMsgIdReq_descriptor_;
}

const IMGetLatestMsgIdReq& IMGetLatestMsgIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMGetLatestMsgIdReq* IMGetLatestMsgIdReq::default_instance_ = NULL;

IMGetLatestMsgIdReq* IMGetLatestMsgIdReq::New() const {
  return new IMGetLatestMsgIdReq;
}

void IMGetLatestMsgIdReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMGetLatestMsgIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetLatestMsgIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetLatestMsgIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetLatestMsgIdReq)
  return false;
#undef DO_
}

void IMGetLatestMsgIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetLatestMsgIdReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetLatestMsgIdReq)
}

::google::protobuf::uint8* IMGetLatestMsgIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetLatestMsgIdReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetLatestMsgIdReq)
  return target;
}

int IMGetLatestMsgIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetLatestMsgIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMGetLatestMsgIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMGetLatestMsgIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMGetLatestMsgIdReq::MergeFrom(const IMGetLatestMsgIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMGetLatestMsgIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetLatestMsgIdReq::CopyFrom(const IMGetLatestMsgIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGetLatestMsgIdReq::Swap(IMGetLatestMsgIdReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMGetLatestMsgIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMGetLatestMsgIdReq_descriptor_;
  metadata.reflection = IMGetLatestMsgIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetLatestMsgIdRsp::kUserIdFieldNumber;
const int IMGetLatestMsgIdRsp::kSessionTypeFieldNumber;
const int IMGetLatestMsgIdRsp::kSessionIdFieldNumber;
const int IMGetLatestMsgIdRsp::kLatestMsgIdFieldNumber;
const int IMGetLatestMsgIdRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetLatestMsgIdRsp)
}

void IMGetLatestMsgIdRsp::InitAsDefaultInstance() {
}

IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(const IMGetLatestMsgIdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdRsp)
}

void IMGetLatestMsgIdRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  latest_msg_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetLatestMsgIdRsp::~IMGetLatestMsgIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdRsp)
  SharedDtor();
}

void IMGetLatestMsgIdRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMGetLatestMsgIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetLatestMsgIdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMGetLatestMsgIdRsp_descriptor_;
}

const IMGetLatestMsgIdRsp& IMGetLatestMsgIdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMGetLatestMsgIdRsp* IMGetLatestMsgIdRsp::default_instance_ = NULL;

IMGetLatestMsgIdRsp* IMGetLatestMsgIdRsp::New() const {
  return new IMGetLatestMsgIdRsp;
}

void IMGetLatestMsgIdRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMGetLatestMsgIdRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(session_id_, latest_msg_id_);
    user_id_ = 0u;
    session_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMGetLatestMsgIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetLatestMsgIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_latest_msg_id;
        break;
      }

      // required uint32 latest_msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_latest_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_msg_id_)));
          set_has_latest_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetLatestMsgIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetLatestMsgIdRsp)
  return false;
#undef DO_
}

void IMGetLatestMsgIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetLatestMsgIdRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->latest_msg_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetLatestMsgIdRsp)
}

::google::protobuf::uint8* IMGetLatestMsgIdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetLatestMsgIdRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // required uint32 latest_msg_id = 4;
  if (has_latest_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->latest_msg_id(), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetLatestMsgIdRsp)
  return target;
}

int IMGetLatestMsgIdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required uint32 latest_msg_id = 4;
    if (has_latest_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_msg_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetLatestMsgIdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMGetLatestMsgIdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMGetLatestMsgIdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMGetLatestMsgIdRsp::MergeFrom(const IMGetLatestMsgIdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_latest_msg_id()) {
      set_latest_msg_id(from.latest_msg_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMGetLatestMsgIdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetLatestMsgIdRsp::CopyFrom(const IMGetLatestMsgIdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMGetLatestMsgIdRsp::Swap(IMGetLatestMsgIdRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(latest_msg_id_, other->latest_msg_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMGetLatestMsgIdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMGetLatestMsgIdRsp_descriptor_;
  metadata.reflection = IMGetLatestMsgIdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetMsgByIdReq::kUserIdFieldNumber;
const int IMGetMsgByIdReq::kSessionTypeFieldNumber;
const int IMGetMsgByIdReq::kSessionIdFieldNumber;
const int IMGetMsgByIdReq::kMsgIdListFieldNumber;
const int IMGetMsgByIdReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetMsgByIdReq::IMGetMsgByIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgByIdReq)
}

void IMGetMsgByIdReq::InitAsDefaultInstance() {
}

IMGetMsgByIdReq::IMGetMsgByIdReq(const IMGetMsgByIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdReq)
}

void IMGetMsgByIdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgByIdReq::~IMGetMsgByIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdReq)
  SharedDtor();
}

void IMGetMsgByIdReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMGetMsgByIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetMsgByIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMGetMsgByIdReq_descriptor_;
}

const IMGetMsgByIdReq& IMGetMsgByIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMGetMsgByIdReq* IMGetMsgByIdReq::default_instance_ = NULL;

IMGetMsgByIdReq* IMGetMsgByIdReq::New() const {
  return new IMGetMsgByIdReq;
}

void IMGetMsgByIdReq::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  msg_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMGetMsgByIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgByIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        break;
      }

      // repeated uint32 msg_id_list = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_msg_id_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msg_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgByIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgByIdReq)
  return false;
#undef DO_
}

void IMGetMsgByIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgByIdReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated uint32 msg_id_list = 4;
  for (int i = 0; i < this->msg_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->msg_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgByIdReq)
}

::google::protobuf::uint8* IMGetMsgByIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgByIdReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // repeated uint32 msg_id_list = 4;
  for (int i = 0; i < this->msg_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->msg_id_list(i), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgByIdReq)
  return target;
}

int IMGetMsgByIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 msg_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->msg_id_list(i));
    }
    total_size += 1 * this->msg_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgByIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMGetMsgByIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMGetMsgByIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMGetMsgByIdReq::MergeFrom(const IMGetMsgByIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMGetMsgByIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetMsgByIdReq::CopyFrom(const IMGetMsgByIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMGetMsgByIdReq::Swap(IMGetMsgByIdReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    msg_id_list_.Swap(&other->msg_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMGetMsgByIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMGetMsgByIdReq_descriptor_;
  metadata.reflection = IMGetMsgByIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IMGetMsgByIdRsp::kUserIdFieldNumber;
const int IMGetMsgByIdRsp::kSessionTypeFieldNumber;
const int IMGetMsgByIdRsp::kSessionIdFieldNumber;
const int IMGetMsgByIdRsp::kMsgListFieldNumber;
const int IMGetMsgByIdRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMGetMsgByIdRsp::IMGetMsgByIdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Message.IMGetMsgByIdRsp)
}

void IMGetMsgByIdRsp::InitAsDefaultInstance() {
}

IMGetMsgByIdRsp::IMGetMsgByIdRsp(const IMGetMsgByIdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdRsp)
}

void IMGetMsgByIdRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMGetMsgByIdRsp::~IMGetMsgByIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdRsp)
  SharedDtor();
}

void IMGetMsgByIdRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (this != default_instance_) {
  }
}

void IMGetMsgByIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetMsgByIdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IMGetMsgByIdRsp_descriptor_;
}

const IMGetMsgByIdRsp& IMGetMsgByIdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eMessage_2eproto();
  return *default_instance_;
}

IMGetMsgByIdRsp* IMGetMsgByIdRsp::default_instance_ = NULL;

IMGetMsgByIdRsp* IMGetMsgByIdRsp::New() const {
  return new IMGetMsgByIdRsp;
}

void IMGetMsgByIdRsp::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  msg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IMGetMsgByIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Message.IMGetMsgByIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_list;
        break;
      }

      // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Message.IMGetMsgByIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Message.IMGetMsgByIdRsp)
  return false;
#undef DO_
}

void IMGetMsgByIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Message.IMGetMsgByIdRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  for (int i = 0; i < this->msg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msg_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Message.IMGetMsgByIdRsp)
}

::google::protobuf::uint8* IMGetMsgByIdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgByIdRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->session_type(), target);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->session_id(), target);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  for (int i = 0; i < this->msg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg_list(i), target);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgByIdRsp)
  return target;
}

int IMGetMsgByIdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  total_size += 1 * this->msg_list_size();
  for (int i = 0; i < this->msg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetMsgByIdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IMGetMsgByIdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IMGetMsgByIdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IMGetMsgByIdRsp::MergeFrom(const IMGetMsgByIdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_list_.MergeFrom(from.msg_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IMGetMsgByIdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetMsgByIdRsp::CopyFrom(const IMGetMsgByIdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->msg_list())) return false;
  return true;
}

void IMGetMsgByIdRsp::Swap(IMGetMsgByIdRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    msg_list_.Swap(&other->msg_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IMGetMsgByIdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IMGetMsgByIdRsp_descriptor_;
  metadata.reflection = IMGetMsgByIdRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace IM

// @@protoc_insertion_point(global_scope)
